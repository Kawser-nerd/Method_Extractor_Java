/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.app;

import org.scijava.app.App;
import org.scijava.log.LogService;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;
import org.scijava.service.Service;

/**
 * An extension of {@link ImageJApp} that provides the legacy ImageJ 1.x version
 * in addition to the regular ImageJ version, when {@link #getVersion()} is
 * called.
 * 
 * @author Curtis Rueden
 * @see org.scijava.app.AppService
 */
@Plugin(type = App.class, name = ImageJApp.NAME,
	priority = ImageJApp.PRIORITY + 1)
public class ToplevelImageJApp extends ImageJApp {

	// NB: This app uses the same name as ImageJApp, but with a higher priority,
	// so that it takes precedence in the AppService.

	@Parameter(required = false)
	private LogService log;

	@Override
	public String getArtifactId() {
		return "imagej";
	}

	@Override
	public String getVersion() {
		final String version = super.getVersion();
		final String legacyVersion = getLegacyVersion();
		return version + (legacyVersion == null ? "" : "/" + legacyVersion);
	}

	// -- Helper methods --

	private String getLegacyVersion() {
		try {
			final Class<?> c = Class.forName("net.imagej.legacy.LegacyService");
			if (!Service.class.isAssignableFrom(c)) return null; // no imagej-legacy

			@SuppressWarnings("unchecked")
			final Class<? extends Service> sc = (Class<? extends Service>) c;

			final Service legacyService = getContext().getService(sc);
			if (legacyService == null) return null; // no LegacyService in context

			return legacyService.getVersion();
		}
		catch (final ClassNotFoundException exc) {
			if (log != null) log.debug(exc);
		}
		return null;
	}

}
/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej;

import io.scif.SCIFIO;
import io.scif.SCIFIOService;

import net.imagej.animation.AnimationService;
import net.imagej.app.ImageJApp;
import net.imagej.display.ImageDisplayService;
import net.imagej.display.OverlayService;
import net.imagej.display.ScreenCaptureService;
import net.imagej.display.WindowService;
import net.imagej.lut.LUTService;
import net.imagej.notebook.NotebookService;
import net.imagej.ops.OpService;
import net.imagej.render.RenderingService;
import net.imagej.sampler.SamplerService;
import net.imagej.updater.UpdateService;
import net.imagej.updater.UploaderService;

import org.scijava.AbstractGateway;
import org.scijava.Context;
import org.scijava.Gateway;
import org.scijava.plugin.Plugin;
import org.scijava.service.SciJavaService;

/**
 * Main entry point into ImageJ. This class enables working with ImageJ services
 * in a simple way, while retaining extensibility (i.e., access to third-party
 * services).
 * 
 * @author Curtis Rueden
 */
@Plugin(type = Gateway.class)
public class ImageJ extends AbstractGateway {

	/** SCIFIO gateway instance, for access to SCIFIO services. */
	private SCIFIO scifio;

	// -- Constructors --

	/**
	 * Creates a new ImageJ application context with all ImageJ, SCIFIO and
	 * SciJava services.
	 */
	public ImageJ() {
		this(new Context(SciJavaService.class, SCIFIOService.class,
			ImageJService.class));
	}

	/**
	 * Creates a new ImageJ application context which wraps the given existing
	 * SciJava context.
	 * 
	 * @see Context
	 */
	public ImageJ(final Context context) {
		super(ImageJApp.NAME, context);
		scifio = new SCIFIO(context);
	}

	// -- ImageJ methods - gateways --

	public SCIFIO scifio() {
		return scifio;
	}

	// -- ImageJ methods - services --

	/**
	 * Gets this application context's {@link AnimationService}.
	 *
	 * @return The {@link AnimationService} of this application context.
	 */
	public AnimationService animation() {
		return get(AnimationService.class);
	}

	/**
	 * Gets this application context's {@link DatasetService}.
	 *
	 * @return The {@link DatasetService} of this application context.
	 */
	public DatasetService dataset() {
		return get(DatasetService.class);
	}

	/**
	 * Gets this application context's {@link ImageDisplayService}.
	 *
	 * @return The {@link ImageDisplayService} of this application context.
	 */
	public ImageDisplayService imageDisplay() {
		return get(ImageDisplayService.class);
	}

	/**
	 * Gets this application context's {@link LUTService}.
	 *
	 * @return The {@link LUTService} of this application context.
	 */
	public LUTService lut() {
		return get(LUTService.class);
	}

	/**
	 * Gets this application context's {@link NotebookService}.
	 *
	 * @return The {@link NotebookService} of this application context.
	 */
	public NotebookService notebook() {
		return get(NotebookService.class);
	}

	/**
	 * Gets this application context's {@link OpService}.
	 *
	 * @return The {@link OpService} of this application context.
	 */
	public OpService op() {
		return get(OpService.class);
	}

	/**
	 * Gets this application context's {@link OverlayService}.
	 *
	 * @return The {@link OverlayService} of this application context.
	 */
	public OverlayService overlay() {
		return get(OverlayService.class);
	}

	/**
	 * Gets this application context's {@link RenderingService}.
	 *
	 * @return The {@link RenderingService} of this application context.
	 */
	public RenderingService rendering() {
		return get(RenderingService.class);
	}

	/**
	 * Gets this application context's {@link SamplerService}.
	 *
	 * @return The {@link SamplerService} of this application context.
	 */
	public SamplerService sampler() {
		return get(SamplerService.class);
	}

	/**
	 * Gets this application context's {@link ScreenCaptureService}.
	 *
	 * @return The {@link ScreenCaptureService} of this application context.
	 */
	public ScreenCaptureService screenCapture() {
		return get(ScreenCaptureService.class);
	}

	/**
	 * Gets this application context's {@link UpdateService}.
	 *
	 * @return The {@link UpdateService} of this application context.
	 */
	public UpdateService update() {
		return get(UpdateService.class);
	}

	/**
	 * Gets this application context's {@link UploaderService}.
	 *
	 * @return The {@link UploaderService} of this application context.
	 */
	public UploaderService uploader() {
		return get(UploaderService.class);
	}

	/**
	 * Gets this application context's {@link WindowService}.
	 *
	 * @return The {@link WindowService} of this application context.
	 */
	public WindowService window() {
		return get(WindowService.class);
	}

	// -- Gateway methods --

	@Override
	public String getShortName() {
		return "ij";
	}
}
/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej;

/**
 * Launches ImageJ.
 * 
 * @author Curtis Rueden
 */
public final class Main {

	private Main() {
		// prevent instantiation of utility class
	}

	/** @deprecated Use {@link ImageJ#launch} instead. */
	@Deprecated
	public static ImageJ launch(final String... args) {
		final ImageJ ij = new ImageJ();
		ij.launch(args);
		return ij;
	}

	public static void main(final String... args) {
		final ImageJ ij = new ImageJ();
		ij.launch(args);
	}

}
/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.debug;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

/**
 * Dumps the type hierarchy of the classes given as arguments.
 * 
 * @author Curtis Rueden
 */
public class TypeHierarchy {

	private final HashMap<Class<?>, TypeNode> classes;

	public TypeHierarchy(final String[] classNames) {
		classes = loadClasses(classNames);
		parseRelationships();
	}

	public void printTree() {
		for (final TypeNode node : sort(classes.values())) {
			if (node.isRoot()) System.out.println(node);
		}
	}

	public static void main(final String[] args) {
		final TypeHierarchy typeHierarchy = new TypeHierarchy(args);
		typeHierarchy.printTree();
	}

	public static <T extends Comparable<? super T>> List<T> sort(
		final Collection<T> c)
	{
		final ArrayList<T> sortedList = new ArrayList<>(c);
		Collections.sort(sortedList);
		return sortedList;
	}

	// -- Helper methods --

	private HashMap<Class<?>, TypeNode> loadClasses(final String[] classNames) {
		final HashMap<Class<?>, TypeNode> list = new HashMap<>();
		for (final String className : classNames) {
			try {
				final Class<?> c = Class.forName(className);
				list.put(c, new TypeNode(c));
			}
			catch (final ClassNotFoundException exc) {
				System.err.println("Ignoring invalid class: " + className);
			}
		}
		return list;
	}

	private void parseRelationships() {
		for (final TypeNode node : classes.values()) {
			parseAncestors(null, node.getClassObject());
		}
	}

	private void parseAncestors(final TypeNode child, final Class<?> c) {
		if (c == null) return;
		final TypeNode node = classes.get(c);
		if (node == null) {
			if (c != Object.class) {
				System.err.println("Ignoring irrelevant class: " + c.getName());
			}
			return;
		}
		if (child != null) node.addChild(child);
		parseAncestors(node, c.getSuperclass());
		for (final Class<?> iface : c.getInterfaces()) {
			parseAncestors(node, iface);
		}
	}

	// -- Helper classes --

	public class TypeNode implements Comparable<TypeNode> {

		private final Class<?> c;
		private final HashSet<TypeNode> children = new HashSet<>();
		private final HashSet<TypeNode> parents = new HashSet<>();

		public TypeNode(final Class<?> c) {
			this.c = c;
		}

		public Class<?> getClassObject() {
			return c;
		}

		public void addChild(final TypeNode node) {
			children.add(node);
			node.parents.add(this);
		}

		public boolean isRoot() {
			return parents.isEmpty();
		}

		public boolean isLeaf() {
			return children.isEmpty();
		}

		@Override
		public String toString() {
			return toString(0);
		}

		private String toString(final int indent) {
			final StringBuilder sb = new StringBuilder();
			for (int i = 0; i < indent; i++) {
				sb.append(' ');
			}
			sb.append(c.getName());
			sb.append("\n");
			for (final TypeNode child : sort(children)) {
				sb.append(child.toString(indent + 2));
			}
			return sb.toString();
		}

		@Override
		public int compareTo(final TypeNode o) {
			return c.getName().compareTo(o.c.getName());
		}

	}

}
/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.app;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import net.imagej.ImageJ;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.scijava.app.App;

/**
 * Tests {@link ToplevelImageJApp}.
 * 
 * @author Curtis Rueden
 */
public class ToplevelImageJAppTest {

	private ImageJ ij;

	@Before
	public void setUp() {
		ij = new ImageJ();
	}

	@After
	public void tearDown() {
		ij.getContext().dispose();
	}

	@Test
	public void testApp() {
		final App app = ij.app().getApp();
		assertSame(ToplevelImageJApp.class, app.getClass());
		assertEquals("net.imagej", app.getGroupId());
		assertEquals("imagej", app.getArtifactId());
		final String version = app.getVersion();
		assertTrue(version.contains("/1."));
	}

}
/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.app;

import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import net.imagej.ImageJService;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.scijava.Context;
import org.scijava.InstantiableException;
import org.scijava.plugin.PluginIndex;
import org.scijava.plugin.PluginInfo;
import org.scijava.service.SciJavaService;
import org.scijava.service.Service;

import io.scif.SCIFIOService;

/**
 * Tests that all expected ImageJ services are present.
 *
 * @author Curtis Rueden
 */
public class ServiceCompletenessTest {

	private Context ctx;

	@Before
	public void setUp() {
		ctx = new Context(ImageJService.class);
	}

	@After
	public void tearDown() {
		ctx.dispose();
	}

	@SuppressWarnings("deprecation")
	@Test
	public void testServices() {
		final ArrayList<Class<? extends Service>> services =
			new ArrayList<>();
		services.add(net.imagej.DefaultDatasetService.class);
		services.add(net.imagej.DefaultImgPlusService.class);
		services.add(net.imagej.animation.DefaultAnimationService.class);
		services.add(net.imagej.autoscale.DefaultAutoscaleService.class);
		services.add(net.imagej.display.DefaultImageDisplayService.class);
		services.add(net.imagej.display.DefaultOverlayService.class);
		services.add(net.imagej.display.DefaultWindowService.class);
		services.add(net.imagej.display.DefaultZoomService.class);
		services.add(net.imagej.display.DummyScreenCaptureService.class);
//		services.add(net.imagej.legacy.LegacyService.class);
		services.add(net.imagej.legacy.display.LegacyImageDisplayService.class);
		services.add(net.imagej.lut.DefaultLUTService.class);
		services.add(net.imagej.measure.DefaultMeasurementService.class);
		services.add(net.imagej.measure.DefaultStatisticsService.class);
		services.add(net.imagej.operator.DefaultCalculatorService.class);
		services.add(net.imagej.ops.DefaultNamespaceService.class);
		services.add(net.imagej.ops.DefaultOpMatchingService.class);
		services.add(net.imagej.ops.DefaultOpService.class);
		services.add(net.imagej.render.DummyRenderingService.class);
		services.add(net.imagej.sampler.DefaultSamplerService.class);
		services.add(net.imagej.threshold.DefaultThresholdService.class);
		services.add(net.imagej.types.DefaultDataTypeService.class);
		services.add(net.imagej.ui.DefaultImageJUIService.class);
		services.add(net.imagej.ui.awt.AWTRenderingService.class);
		services.add(net.imagej.ui.awt.AWTScreenCaptureService.class);
		services.add(net.imagej.ui.swing.overlay.JHotDrawService.class);
		services.add(net.imagej.updater.DefaultUpdateService.class);
		services.add(net.imagej.updater.DefaultUploaderService.class);
		for (final Class<? extends Service> c : services) {
			final Service s = ctx.service(c);
			assertSame(c, s.getClass());
		}
	}

	@Test
	public void testMarkerInterfaces() throws InstantiableException {
		final PluginIndex pluginIndex = new PluginIndex();
		final List<PluginInfo<Service>> servicePlugins = //
			pluginIndex.getPlugins(Service.class);
		for (final PluginInfo<Service> info : servicePlugins) {
			final Class<? extends Service> c = info.loadClass();
			final boolean scijava = SciJavaService.class.isAssignableFrom(c);
			final boolean imagej = ImageJService.class.isAssignableFrom(c);
			final boolean scifio = SCIFIOService.class.isAssignableFrom(c);
			assertTrue(c.getName(), scijava ^ imagej ^ scifio);
		}
	}

}
/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.app;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import net.imagej.ImageJ;
import net.imagej.ImageJService;
import net.imagej.Main;

import org.junit.Test;
import org.scijava.plugin.Plugin;
import org.scijava.service.AbstractService;
import org.scijava.service.Service;

/**
 * Tests {@link Main}.
 *
 * @author Curtis Rueden
 */
public class MainTest {

	/** Tests launching an alternate main method. */
	@Test
	public void testMains() {
		final ImageJ ij = new ImageJ();
		ij.launch("--main", Concatenate.class.getName(), "kung", "-", "fu");
		assertEquals("kung-fu", Concatenate.s);
		final boolean headless = ij.ui().isHeadless();
		assertEquals(headless, ij.get(LitmusService.class).isDisposed());
		if (!headless) {
			// Since we didn't run headlessly we need to manually dispose the context
			ij.getContext().dispose();
		}
	}

	/**
	 * Tests that the {@link org.scijava.Context} is disposed after running
	 * headlessly.
	 */
	@Test
	public void testHeadless() {
		final ImageJ ij = new ImageJ();
		ij.launch("--headless");
		assertTrue(ij.get(LitmusService.class).isDisposed());
	}

	// -- Helper classes --

	/** A service which knows whether it has been disposed yet. */
	@Plugin(type = Service.class)
	public static class LitmusService extends AbstractService implements
		ImageJService
	{

		private boolean disposed;

		@Override
		public void dispose() {
			disposed = true;
		}

		public boolean isDisposed() {
			return disposed;
		}
	}

	/** Class containing a handy main method for testing. */
	public static class Concatenate {

		public static String s;

		public static void main(final String... args) {
			final StringBuilder sb = new StringBuilder();
			for (final String arg : args) {
				sb.append(arg);
			}
			s = sb.toString();
		}
	}

}
